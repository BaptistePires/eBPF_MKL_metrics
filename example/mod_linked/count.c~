#include <linux/init.h>
#include <linux/module.h>
#include <linux/types.h>
#include <linux/kernel.h>
#include <linux/moduleparam.h>
#include <linux/tracepoint.h>

MODULE_DESCRIPTION("Module \"hello world param\"");
MODULE_AUTHOR("Leif Henriksen");
MODULE_LICENSE("GPL");

enum TPoints {
	      SYS_ENTER,
	      SYS_EXIT,
	      TPOINT_COUNT
};

static struct tracepoint  *t_points[TPOINT_COUNT];

static char* t_point_names[TPOINT_COUNT] = {
	"sys_enter",
	"sys_exit",
};

static void lookup_tps(struct tracepoint *tp, void *priv) {
	int i = 0;
	for(; i < TPOINT_COUNT; i++)
	{
		if(strcmp(tp->name, t_point_names[i]) == 0){
		        printk("found %s\n", t_point_names[i]);
			t_points[i] = tp;
		}
	}	
}
static int count[2] = {0};

static void probe_enter(struct pt_regs *regs, long syscall)
{
  if(((struct pt_regs*)syscall)->orig_ax == 6 || ((struct pt_regs*)syscall)->orig_ax == 257)
    {
      count[0]++;
      //pr_info("count : enter_probe : syscall = %li\n", ((struct pt_regs*)syscall)->orig_ax);
    }
}

static void probe_exit(struct pt_regs *regs, long syscall)
{
    if(((struct pt_regs*)syscall)->orig_ax == 6 || ((struct pt_regs*)syscall)->orig_ax == 257)
    {
	count[1]++;
    }
}

static int __init count_init(void)
{
	int i = 0;
	printk("count : init\n");

	for_each_kernel_tracepoint(lookup_tps, NULL);
	for(; i < TPOINT_COUNT; i++)
	{
		if(t_points[i] == NULL)
		{
			printk("count : Error: %s not found\n", t_point_names[i]);
			return -1;
		}
	}
	i = 0;
	i += tracepoint_probe_register(t_points[0], probe_enter, NULL);
	i += tracepoint_probe_register(t_points[1], probe_exit, NULL);
	if(i) {
		printk(KERN_INFO "regist fail.\n");
		return -1;
	}

	return 0;
}
module_init(count_init);

static void __exit count_exit(void)
{
	tracepoint_probe_unregister(t_points[0], probe_enter, NULL);
	tracepoint_probe_unregister(t_points[1], probe_exit, NULL);
	pr_info("count : exit_probe : count = %i\n", count[0]);
	pr_info("count : enter_probe : count = %i\n", count[1]);
	printk("count : exit\n");
}
module_exit(count_exit);

