!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
$(EXECABLE)	bpf/Makefile	/^$(EXECABLE): bpfload$/;"	t
$(EXECABLE)	tools/Makefile	/^$(EXECABLE): bpfload$/;"	t
.DEFAULT_GOAL	bpf/Makefile	/^.DEFAULT_GOAL := $(EXECABLE)/;"	m
.DEFAULT_GOAL	tools/Makefile	/^.DEFAULT_GOAL := $(EXECABLE)/;"	m
BPFCODE	bpf/Makefile	/^BPFCODE = wrapper$/;"	m
BPFCODE	tools/Makefile	/^BPFCODE = wrapper$/;"	m
BPFLOADER	bpf/Makefile	/^BPFLOADER = $(BPFTOOLS)\/bpf_load.c$/;"	m
BPFLOADER	tools/Makefile	/^BPFLOADER = $(BPFTOOLS)\/bpf_load.c$/;"	m
BPFSO	bpf/Makefile	/^BPFSO = -lbpf$/;"	m
BPFSO	tools/Makefile	/^BPFSO = -lbpf$/;"	m
BPFTOOLS	bpf/Makefile	/^BPFTOOLS = \/media\/baptiste\/hdd\/Cours\/CoursS2\/psar\/kernel\/linux-5.10.17\/samples\/bpf$/;"	m
BPFTOOLS	tools/Makefile	/^BPFTOOLS = \/media\/baptiste\/hdd\/Cours\/CoursS2\/psar\/kernel\/linux-5.10.17\/samples\/bpf$/;"	m
CLANG	bpf/Makefile	/^CLANG = clang$/;"	m
CLANG	tools/Makefile	/^CLANG = clang$/;"	m
EXECABLE	bpf/Makefile	/^EXECABLE = monitor-exec$/;"	m
EXECABLE	tools/Makefile	/^EXECABLE = loader$/;"	m
FIFO_PATH	bpf/loader.c	/^#define FIFO_PATH /;"	d	file:
INCLUDE_VERMAGIC	mod/helloWorld.mod.c	/^#define INCLUDE_VERMAGIC$/;"	d	file:
KERNELDIR_PNL	mod/Makefile	/^KERNELDIR_PNL ?=\/media\/baptiste\/hdd\/Cours\/CoursS2\/psar\/kernel\/linux-5.10.17$/;"	m
KERNELDIR_PNL	modules/hw_kprobe/Makefile	/^KERNELDIR_PNL ?=\/media\/baptiste\/hdd\/Cours\/CoursS2\/psar\/kernel\/linux-5.10.17$/;"	m
LIBRARY_PATH	bpf/Makefile	/^LIBRARY_PATH = -L\/usr\/local\/lib64$/;"	m
LIBRARY_PATH	tools/Makefile	/^LIBRARY_PATH = -L\/usr\/local\/lib64$/;"	m
PWD	mod/Makefile	/^PWD := $(shell pwd)$/;"	m
PWD	modules/hw_kprobe/Makefile	/^PWD := $(shell pwd)$/;"	m
SAVE_FILENAME	bpf/loader.c	/^#define SAVE_FILENAME /;"	d	file:
SEC	bpf/core.c	/^#define SEC(/;"	d	file:
SEC	bpf/hw.c	/^#define SEC(/;"	d	file:
SEC	bpf/wrapper.c	/^#define SEC(/;"	d	file:
_license	bpf/hw.c	/^char _license[] SEC("license") = "GPL";$/;"	v	typeref:typename:char[]SEC ("")
_license	bpf/wrapper.c	/^char _license[] SEC("license") = "GPL";/;"	v	typeref:typename:char[]SEC ("")
all	mod/Makefile	/^all :$/;"	t
all	modules/hw_kprobe/Makefile	/^all :$/;"	t
bpf_prog	bpf/hw.c	/^int bpf_prog(void *ctx) {$/;"	f	typeref:typename:SEC ("")int
bpf_prog	bpf/wrapper.c	/^int bpf_prog(void *ctx) {$/;"	f	typeref:typename:SEC ("")int
bpfload	bpf/Makefile	/^bpfload: build$/;"	t
bpfload	tools/Makefile	/^bpfload: $/;"	t
build	bpf/Makefile	/^build: ${BPFCODE.c} ${BPFLOADER}$/;"	t
build	tools/Makefile	/^build: ${BPFCODE.c} ${BPFLOADER}$/;"	t
clean	bpf/Makefile	/^clean:$/;"	t
clean	mod/Makefile	/^clean:$/;"	t
clean	modules/hw_kprobe/Makefile	/^clean:$/;"	t
clean	tools/Makefile	/^clean:$/;"	t
core	bpf/core.c	/^int core(void *ctx) {$/;"	f	typeref:typename:int
count	mod/helloWorld.c	/^    __u8 count;$/;"	m	struct:store_time	typeref:typename:__u8	file:
fifo_read_fd	bpf/loader.c	/^int fifo_read_fd, fifo_write_fd;$/;"	v	typeref:typename:int
fifo_read_path	bpf/loader.c	/^char *fifo_read_path, *fifo_write_path;$/;"	v	typeref:typename:char *
fifo_write_fd	bpf/loader.c	/^int fifo_read_fd, fifo_write_fd;$/;"	v	typeref:typename:int
fifo_write_path	bpf/loader.c	/^char *fifo_read_path, *fifo_write_path;$/;"	v	typeref:typename:char **
handler	bpf/loader.c	/^void handler(int sign){$/;"	f	typeref:typename:void
handler_pre	mod/helloWorld.c	/^static int handler_pre(struct kprobe *p, struct pt_regs *regs)$/;"	f	typeref:typename:int	file:
handler_pre	modules/hw_kprobe/hw_kprobe.c	/^static int handler_pre(struct kprobe *p, struct pt_regs *regs)$/;"	f	typeref:typename:int	file:
helloWorld_attr	mod/helloWorld.c	/^static struct kobj_attribute helloWorld_attr = __ATTR_RO(helloWorld);$/;"	v	typeref:struct:kobj_attribute	file:
helloWorld_show	mod/helloWorld.c	/^static ssize_t helloWorld_show(struct kobject *kobj, $/;"	f	typeref:typename:ssize_t	file:
kp	mod/helloWorld.c	/^static struct kprobe kp = {$/;"	v	typeref:struct:kprobe	file:
kp	modules/hw_kprobe/hw_kprobe.c	/^static struct kprobe kp = {$/;"	v	typeref:struct:kprobe	file:
kprobe_exit	mod/helloWorld.c	/^static void __exit kprobe_exit(void)$/;"	f	typeref:typename:void __exit	file:
kprobe_exit	modules/hw_kprobe/hw_kprobe.c	/^static void __exit kprobe_exit(void)$/;"	f	typeref:typename:void __exit	file:
kprobe_init	mod/helloWorld.c	/^static int __init kprobe_init(void)$/;"	f	typeref:typename:int __init	file:
kprobe_init	modules/hw_kprobe/hw_kprobe.c	/^static int __init kprobe_init(void)$/;"	f	typeref:typename:int __init	file:
lookup_tps	mod/tp_trace.c	/^static void lookup_tps(struct tracepoint *tp, void *priv){$/;"	f	typeref:typename:void	file:
main	bpf/loader.c	/^int main(int argc, char **argv) {$/;"	f	typeref:typename:int
main	tools/loader.c	/^int main(int argc, char **argv) {$/;"	f	typeref:typename:int
mon_tp	mod/tp_trace.c	/^static struct tracepoint * mon_tp = NULL;$/;"	v	typeref:struct:tracepoint *	file:
print_all_events	mod/tp_trace.c	/^static void print_all_events(struct tracepoint *tp, void *priv){$/;"	f	typeref:typename:void	file:
probe	mod/tp_trace.c	/^static void probe(struct inode *inode, loff_t pos, unsigned int len,$/;"	f	typeref:typename:void	file:
retrieve_map_value	bpf/loader.c	/^void retrieve_map_value(void)$/;"	f	typeref:typename:void
store_time	mod/helloWorld.c	/^struct store_time {$/;"	s	file:
time_values	mod/helloWorld.c	/^}static time_values;$/;"	v	typeref:struct:store_time 
times	mod/helloWorld.c	/^    __u64 times[100];$/;"	m	struct:store_time	typeref:typename:__u64[100]	file:
tp_name	mod/tp_trace.c	/^static char* tp_name = "ext4_da_write_begin";$/;"	v	typeref:typename:char *	file:
tp_test_exit	mod/tp_trace.c	/^static void __exit tp_test_exit(void)$/;"	f	typeref:typename:void __exit	file:
tp_test_init	mod/tp_trace.c	/^static int __init tp_test_init(void)$/;"	f	typeref:typename:int __init	file:
update_time	bpf/wrapper.c	/^static __always_inline void update_time(void *map, __u64 *new_value)$/;"	f	typeref:typename:__always_inline void	file:
